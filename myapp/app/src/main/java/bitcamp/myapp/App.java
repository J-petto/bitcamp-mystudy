package bitcamp.myapp;
/*
 * This source file was generated by the Gradle 'init' task
 */

public class App {

    static String[] mainMenus = {"회원", "팀", "프로젝트", "게시판", "도움말", "종료"};

    static String[][] subMenus = {
            {"등록", "목록", "조회", "변경", "삭제"},
            {"등록", "목록", "조회", "변경", "삭제"},
            {"등록", "목록", "조회", "변경", "삭제"},
            {"등록", "목록", "조회", "변경", "삭제"}
    };

    public static void main(String[] args) {
        UserCommand.autoCreateUser();
        TeamCommand.autoCreateTeam();

        printMenu();

        String checkMenu;
        String menuTitle;
        int menuNo = 0;
        while (true) {
            checkMenu = Prompt.prompt("메인> ");
            if (checkMenu.equals("menu")) {
                printMenu();
            } else {
                try {
                    menuNo = Integer.parseInt(checkMenu);
                    menuTitle = getMenuTitle(menuNo, mainMenus);
                    if (menuTitle == null) {
                        System.out.println("메뉴 번호가 옳지 않습니다");
                    } else if (menuTitle.equals("종료")) {
                        System.out.println("종료합니다");
                        break;
                    } else {
                        subProcess(menuTitle, subMenus[menuNo - 1]);
                    }
                } catch (NumberFormatException e) {
                    System.out.println("메뉴 번호가 아닙니다.");
                }
            }
        }
        Prompt.closeScanner();
    }

    static void printMenu() {
        String title = "[팀 프로젝트 관리]";
        String line = "----------------------------------------------";

        String bold = "\033[1m";
        String red = "\033[31m";
        String ansiEnd = "\033[0m";

        System.out.println(bold + line + ansiEnd);
        System.out.println(bold + title + ansiEnd + "\n");
        for (int i = 0; i < mainMenus.length; i++) {
            if (mainMenus[i].equals("종료")) {
                System.out.printf(bold + red + "%d. %s\n", i + 1, mainMenus[i] + ansiEnd);
            } else {
                System.out.printf("%d. %s\n", i + 1, mainMenus[i]);
            }
        }
        System.out.println(bold + line + ansiEnd);
    }

    static boolean isValidateMenu(int menuNo, String[] menus) {
        return menuNo > 0 && menuNo <= menus.length;
    }

    static String getMenuTitle(int menuNo, String[] menus) {
        return isValidateMenu(menuNo, menus) ? menus[menuNo - 1] : null;
    }

    static void subProcess(String menuTitle, String[] menus) {
        printSubMenu(menuTitle, menus);
        String checkMenu;
        int menuNo;
        String subMenuTitle;
        while (true) {
            checkMenu = Prompt.prompt(String.format("메인/%s> ", menuTitle));
            if (checkMenu.equals("menu")) {
                printSubMenu(menuTitle, menus);
            } else if (checkMenu.equals("9")) {
                break;
            } else {
                try {
                    menuNo = Integer.parseInt(checkMenu);
                    subMenuTitle = getMenuTitle(menuNo, menus);
                    if (subMenuTitle == null) {
                        System.out.println("메뉴 번호가 옳지 않습니다");
                    } else {
                        switch (menuTitle) {
                            case "회원":
                                executeUserCommand(subMenuTitle);
                                break;
                            case "팀":
                                executeTeamCommand(subMenuTitle);
                                break;
                            case "프로젝트":
                                executeProjectCommand(subMenuTitle);
                                break;
                            case "게시판":
                                executeBoardCommand(subMenuTitle);
                                break;
                        }
                    }
                } catch (NumberFormatException e) {
                    System.out.println("메뉴 번호가 아닙니다.");
                }
            }
        }
    }

    static void printSubMenu(String menuTitle, String[] menus) {
        System.out.printf("[%s]\n", menuTitle);
        for (int i = 0; i < menus.length; i++) {
            System.out.printf("%d. %s\n", i + 1, menus[i]);
        }
        System.out.println("9. 이전");
    }

    static void executeUserCommand(String subMenuTitle) {
        switch (subMenuTitle) {
            case "등록":
                UserCommand.createUser();
                break;
            case "목록":
                UserCommand.listUser();
                break;
            case "조회":
                UserCommand.searchUser();
                break;
            case "변경":
                UserCommand.updateUser();
                break;
            case "삭제":
                UserCommand.deleteUser();
                break;
        }
    }

    static void executeTeamCommand(String subMenuTitle) {
        switch (subMenuTitle) {
            case "등록":
                TeamCommand.createTeam();
                break;
            case "목록":
                TeamCommand.listTeam();
                break;
            case "조회":
                TeamCommand.searchTeam();
                break;
            case "변경":
                TeamCommand.updateTeam();
                break;
            case "삭제":
                TeamCommand.deleteTeam();
                break;
        }
    }

    static void executeProjectCommand(String subMenuTitle) {

    }

    static void executeBoardCommand(String subMenuTitle) {

    }
}
